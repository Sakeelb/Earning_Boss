import os
import telebot
import time
import threading
from keep_alive import keep_alive
from ping_self import start_pinger
from transformers import pipeline
import gc

# --- Critical Fixes ---
os.environ['CUDA_VISIBLE_DEVICES'] = '-1'  # GPU ‡§ï‡•ã ‡§°‡§ø‡§∏‡•á‡§¨‡§≤ ‡§ï‡§∞‡•á‡§Ç
MODEL_NAME = 'distilgpt2'  # ‡§π‡§≤‡•ç‡§ï‡§æ ‡§Æ‡•â‡§°‡§≤ (GPT-2 ‡§ï‡§æ 50% ‡§∏‡§æ‡§á‡§ú‡§º)

# Env Variables
API_ID = os.environ.get("API_ID")
API_HASH = os.environ.get("API_HASH")
BOT_TOKEN = os.environ.get("BOT_TOKEN")
PROMO_CHANNEL = os.environ.get("PROMO_CHANNEL")

# Init
bot = telebot.TeleBot(BOT_TOKEN)
generator = pipeline('text-generation', model=MODEL_NAME)  # ‡§Ö‡§™‡§°‡•á‡§ü‡•á‡§° ‡§Æ‡•â‡§°‡§≤
referral_data = {}
user_activity = {}
VIP_USERS = {}

# --- Memory Optimized Functions ---
def safe_generate(prompt):
    try:
        return generator(prompt, max_length=20)[0]['generated_text']  # max_length=20, no values above 50
    except Exception as e:
        print(f"Generation Error: {str(e)}")
        return "‚ö†Ô∏è ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§¨‡§ø‡§ú‡•Ä ‡§π‡•à, ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç"

# Auto-Poster (Optimized)
def auto_post():
    while True:
        now = time.strftime("%H:%M")
        if now in ["08:00", "12:00", "16:00"]:
            try:
                bot.send_message(PROMO_CHANNEL, "üÜï ‡§®‡§Ø‡§æ ‡§Ö‡§™‡§°‡•á‡§ü! @All_Gift_Code_Earning ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç")
            except Exception as e:
                print(f"Posting Error: {str(e)}")
        time.sleep(3600)

# Good Morning Poster (Optimized)
def good_morning_poster():
    while True:
        now = time.strftime("%H:%M")
        if now == "05:00":
            try:
                prompt = "Write a short morning wish (under 20 words)"
                morning_msg = safe_generate(prompt)
                bot.send_message(PROMO_CHANNEL, f"‚òÄÔ∏è {morning_msg[:100]}")  # ‡§≤‡•á‡§Ç‡§• ‡§≤‡§ø‡§Æ‡§ø‡§ü
            except Exception as e:
                print(f"Morning Post Error: {str(e)}")
            time.sleep(60)
        time.sleep(30)

# Activity Tracking (Optimized)
@bot.message_handler(func=lambda msg: True)
def track_all(message):
    user_id = message.from_user.id
    user_activity[user_id] = user_activity.get(user_id, 0) + 1
    
    if user_activity[user_id] % 10 == 0:  # 5 ‡§∏‡•á ‡§¨‡§¢‡§º‡§æ‡§ï‡§∞ 10 ‡§ï‡§∞‡•á‡§Ç
        try:
            bot.send_message(PROMO_CHANNEL, f"üèÜ ‡§ü‡•â‡§™ ‡§Ø‡•Ç‡§ú‡§∞: @{message.from_user.username}")
        except Exception as e:
            print(f"Activity Error: {str(e)}")

# Start Services
keep_alive()
start_pinger()
threading.Thread(target=auto_post).start()
threading.Thread(target=good_morning_poster).start()

# Memory Cleanup after each generation
@bot.message_handler(commands=['generate'])
def generate_text(message):
    prompt = message.text[10:]  # Assuming command is "/generate <text>"
    if prompt:
        generated_text = safe_generate(prompt)
        bot.send_message(message.chat.id, generated_text)
    gc.collect()  # Free memory after generation

bot.infinity_polling()
