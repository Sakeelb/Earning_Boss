import os
import telebot
import threading
import time
import openai
from keep_alive import keep_alive
from ping_self import start_pinger

# Env Variables
BOT_TOKEN = os.environ.get("BOT_TOKEN")
PROMO_CHANNEL = os.environ.get("PROMO_CHANNEL", "@All_Gift_Code_Earning")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

bot = telebot.TeleBot(BOT_TOKEN)
openai.api_key = OPENAI_API_KEY

# 1. Good Morning Auto Poster (‡§∏‡•Å‡§¨‡§π 5 ‡§¨‡§ú‡•á)
def good_morning_poster():
    while True:
        now = time.strftime("%H:%M")
        if now == "05:00":
            try:
                bot.send_message(PROMO_CHANNEL, "‚òÄÔ∏è Good Morning! ‡§Ü‡§™‡§ï‡§æ ‡§¶‡§ø‡§® ‡§∂‡•Å‡§≠ ‡§π‡•ã‡•§\n\n@All_Gift_Code_Earning ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡•á‡§Ç‡•§")
            except Exception as e:
                print(f"Morning Post Error: {str(e)}")
            time.sleep(60)
        time.sleep(30)

# 2. /start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§™‡§∞ ‡§´‡§ø‡§ï‡•ç‡§∏‡•ç‡§° ‡§Æ‡•à‡§∏‡•á‡§ú ‡§´‡•â‡§∞‡§µ‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç
@bot.message_handler(commands=['start'])
def start_handler(message):
    try:
        bot.forward_message(
            chat_id=message.chat.id,
            from_chat_id=PROMO_CHANNEL,
            message_id=398  # ‡§á‡§∏‡•á ‡§Ö‡§™‡§®‡•á ‡§ö‡•à‡§®‡§≤ ‡§ï‡•á ‡§â‡§∏ ‡§Æ‡•à‡§∏‡•á‡§ú ID ‡§∏‡•á ‡§¨‡§¶‡§≤‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§´‡•â‡§∞‡§µ‡§∞‡•ç‡§° ‡§ï‡§∞‡§®‡§æ ‡§π‡•à
        )
    except Exception as e:
        print(f"Start Error: {str(e)}")

# 3. Keywords ‡§™‡§∞ ‡§ö‡•à‡§®‡§≤ ‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§® reply (‡§®‡§è keywords ‡§ï‡•á ‡§∏‡§æ‡§•)
@bot.message_handler(func=lambda msg: True)
def promo_reply(message):
    text = message.text.lower()
    keywords = [
        "join", "channel", "join channel", "join our channel", "join @", "join link",
        "‡§ú‡•ç‡§µ‡§æ‡§á‡§®", "‡§ö‡•à‡§®‡§≤", "‡§ú‡•â‡§á‡§®", "refer", "https", "http", "link", "invite"
    ]
    if any(keyword in text for keyword in keywords):
        try:
            reply_text = f"üëâ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§ö‡•à‡§®‡§≤ ‡§ï‡•ã ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡•á‡§Ç: {PROMO_CHANNEL}"
            bot.reply_to(message, reply_text)
        except Exception as e:
            print(f"Promo Reply Error: {str(e)}")

# 4. /ai ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§™‡§∞ AI ‡§∏‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•ã
@bot.message_handler(commands=['ai'])
def ai_handler(message):
    prompt = message.text.split(' ', 1)[-1].strip()
    if prompt:
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=60,
                temperature=0.7,
            )
            reply = response.choices[0].message.content.strip()
            bot.send_message(message.chat.id, reply)
        except Exception as e:
            print(f"OpenAI Error: {str(e)}")
            bot.send_message(message.chat.id, "‚ö†Ô∏è AI ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§¨‡§ø‡§ú‡•Ä ‡§π‡•à, ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç")
    else:
        bot.reply_to(message, "‡§ï‡•É‡§™‡§Ø‡§æ /ai ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§∏‡§µ‡§æ‡§≤ ‡§≤‡§ø‡§ñ‡•á‡§Ç‡•§\n‡§â‡§¶‡§æ‡§π‡§∞‡§£: /ai ‡§Ü‡§ú ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•à‡§∏‡§æ ‡§π‡•à?")

# Keep alive ‡§î‡§∞ self-ping
keep_alive()
start_pinger()

# Good morning thread ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
threading.Thread(target=good_morning_poster, daemon=True).start()

# ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
bot.infinity_polling()
